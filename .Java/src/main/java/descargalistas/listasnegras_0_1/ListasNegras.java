// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package descargalistas.listasnegras_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;
import java.net.InetAddress;
import java.net.UnknownHostException;

@SuppressWarnings("unused")
/**
 * Job: ListasNegras Purpose: Descarga listas<br>
 * Description: Descarga listas de ONU y OFAC <br>
 * @author test@talend.com
 * @version 6.0.0.20150507_2137-M5
 * @status 
 */
public class ListasNegras implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ruta != null) {

				this.setProperty("ruta", ruta.toString());

			}

			if (urlONU != null) {

				this.setProperty("urlONU", urlONU.toString());

			}

			if (urlOFAC != null) {

				this.setProperty("urlOFAC", urlOFAC.toString());

			}

			if (archivoONU != null) {

				this.setProperty("archivoONU", archivoONU.toString());

			}

			if (archivoOFAC != null) {

				this.setProperty("archivoOFAC", archivoOFAC.toString());

			}

			if (ip != null) {

				this.setProperty("ip", ip.toString());

			}

			if (usuario != null) {

				this.setProperty("usuario", usuario.toString());

			}

			if (rutaSftp != null) {

				this.setProperty("rutaSftp", rutaSftp.toString());

			}

			if (servidorSftp != null) {

				this.setProperty("servidorSftp", servidorSftp.toString());

			}

			if (usrSftp != null) {

				this.setProperty("usrSftp", usrSftp.toString());

			}

			if (puertoSftp != null) {

				this.setProperty("puertoSftp", puertoSftp.toString());

			}

			if (pswdSftp != null) {

				this.setProperty("pswdSftp", pswdSftp.toString());

			}

		}

		public String ruta;

		public String getRuta() {
			return this.ruta;
		}

		public String urlONU;

		public String getUrlONU() {
			return this.urlONU;
		}

		public String urlOFAC;

		public String getUrlOFAC() {
			return this.urlOFAC;
		}

		public String archivoONU;

		public String getArchivoONU() {
			return this.archivoONU;
		}

		public String archivoOFAC;

		public String getArchivoOFAC() {
			return this.archivoOFAC;
		}

		public String ip;

		public String getIp() {
			return this.ip;
		}

		public String usuario;

		public String getUsuario() {
			return this.usuario;
		}

		public String rutaSftp;

		public String getRutaSftp() {
			return this.rutaSftp;
		}

		public String servidorSftp;

		public String getServidorSftp() {
			return this.servidorSftp;
		}

		public String usrSftp;

		public String getUsrSftp() {
			return this.usrSftp;
		}

		public Integer puertoSftp;

		public Integer getPuertoSftp() {
			return this.puertoSftp;
		}

		public java.lang.String pswdSftp;

		public java.lang.String getPswdSftp() {
			return this.pswdSftp;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ListasNegras";
	private final String projectName = "DESCARGALISTAS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ListasNegras.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ListasNegras.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDie_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError7", 0, "error");
			}

			errorCode = null;
			tDie_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFTPConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPPut_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError6", 0, "error");
			}

			errorCode = null;
			tDie_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFTPPut_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError4", 0, "error");
			}

			errorCode = null;
			tDie_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError3", 0, "error");
			}

			errorCode = null;
			tDie_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileExist_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileFetch_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError1", 0, "error");
			}

			errorCode = null;
			tDie_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileFetch_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileFetch_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError2", 0, "error");
			}

			errorCode = null;
			tDie_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileFetch_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPPut_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileFetch_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileFetch_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogRow_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				tLogCatcher_1.addMessage(
						"tDie",
						"tDie_1",
						5,
						"Error: Conectar a la url de la ONU "
								+ ((String) globalMap
										.get("tFileFetch_1_ERROR_MESSAGE")), 4);
				tLogCatcher_1Process(globalMap);

				globalMap.put("tDie_1_DIE_PRIORITY", 5);
				System.err
						.println("Error: Conectar a la url de la ONU "
								+ ((String) globalMap
										.get("tFileFetch_1_ERROR_MESSAGE")));

				globalMap.put(
						"tDie_1_DIE_MESSAGE",
						"Error: Conectar a la url de la ONU "
								+ ((String) globalMap
										.get("tFileFetch_1_ERROR_MESSAGE")));
				globalMap.put(
						"tDie_1_DIE_MESSAGES",
						"Error: Conectar a la url de la ONU "
								+ ((String) globalMap
										.get("tFileFetch_1_ERROR_MESSAGE")));
				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_2 begin ] start
				 */

				ok_Hash.put("tDie_2", false);
				start_Hash.put("tDie_2", System.currentTimeMillis());

				currentComponent = "tDie_2";

				int tos_count_tDie_2 = 0;

				/**
				 * [tDie_2 begin ] stop
				 */

				/**
				 * [tDie_2 main ] start
				 */

				currentComponent = "tDie_2";

				tLogCatcher_1.addMessage(
						"tDie",
						"tDie_2",
						5,
						"Error: Conectar a la url de la OFAC "
								+ ((String) globalMap
										.get("tFileFetch_2_ERROR_MESSAGE")), 4);
				tLogCatcher_1Process(globalMap);

				globalMap.put("tDie_2_DIE_PRIORITY", 5);
				System.err
						.println("Error: Conectar a la url de la OFAC "
								+ ((String) globalMap
										.get("tFileFetch_2_ERROR_MESSAGE")));

				globalMap.put(
						"tDie_2_DIE_MESSAGE",
						"Error: Conectar a la url de la OFAC "
								+ ((String) globalMap
										.get("tFileFetch_2_ERROR_MESSAGE")));
				globalMap.put(
						"tDie_2_DIE_MESSAGES",
						"Error: Conectar a la url de la OFAC "
								+ ((String) globalMap
										.get("tFileFetch_2_ERROR_MESSAGE")));
				currentComponent = "tDie_2";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_2_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_2++;

				/**
				 * [tDie_2 main ] stop
				 */

				/**
				 * [tDie_2 end ] start
				 */

				currentComponent = "tDie_2";

				ok_Hash.put("tDie_2", true);
				end_Hash.put("tDie_2", System.currentTimeMillis());

				/**
				 * [tDie_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDie_2 finally ] start
				 */

				currentComponent = "tDie_2";

				/**
				 * [tDie_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}

	public void tDie_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_3 begin ] start
				 */

				ok_Hash.put("tDie_3", false);
				start_Hash.put("tDie_3", System.currentTimeMillis());

				currentComponent = "tDie_3";

				int tos_count_tDie_3 = 0;

				/**
				 * [tDie_3 begin ] stop
				 */

				/**
				 * [tDie_3 main ] start
				 */

				currentComponent = "tDie_3";

				tLogCatcher_1.addMessage("tDie", "tDie_3", 5,
						"Error: descarga de la lista de la ONU "
								+ context.archivoONU, 4);
				tLogCatcher_1Process(globalMap);

				globalMap.put("tDie_3_DIE_PRIORITY", 5);
				System.err.println("Error: descarga de la lista de la ONU "
						+ context.archivoONU);

				globalMap.put("tDie_3_DIE_MESSAGE",
						"Error: descarga de la lista de la ONU "
								+ context.archivoONU);
				globalMap.put("tDie_3_DIE_MESSAGES",
						"Error: descarga de la lista de la ONU "
								+ context.archivoONU);
				currentComponent = "tDie_3";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_3_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_3++;

				/**
				 * [tDie_3 main ] stop
				 */

				/**
				 * [tDie_3 end ] start
				 */

				currentComponent = "tDie_3";

				ok_Hash.put("tDie_3", true);
				end_Hash.put("tDie_3", System.currentTimeMillis());

				/**
				 * [tDie_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDie_3 finally ] start
				 */

				currentComponent = "tDie_3";

				/**
				 * [tDie_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_3_SUBPROCESS_STATE", 1);
	}

	public void tDie_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_4 begin ] start
				 */

				ok_Hash.put("tDie_4", false);
				start_Hash.put("tDie_4", System.currentTimeMillis());

				currentComponent = "tDie_4";

				int tos_count_tDie_4 = 0;

				/**
				 * [tDie_4 begin ] stop
				 */

				/**
				 * [tDie_4 main ] start
				 */

				currentComponent = "tDie_4";

				tLogCatcher_1.addMessage("tDie", "tDie_4", 5,
						"Error: descarga de la lista de la OFAC "
								+ context.archivoOFAC, 4);
				tLogCatcher_1Process(globalMap);

				globalMap.put("tDie_4_DIE_PRIORITY", 5);
				System.err.println("Error: descarga de la lista de la OFAC "
						+ context.archivoOFAC);

				globalMap.put("tDie_4_DIE_MESSAGE",
						"Error: descarga de la lista de la OFAC "
								+ context.archivoOFAC);
				globalMap.put("tDie_4_DIE_MESSAGES",
						"Error: descarga de la lista de la OFAC "
								+ context.archivoOFAC);
				currentComponent = "tDie_4";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_4_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_4++;

				/**
				 * [tDie_4 main ] stop
				 */

				/**
				 * [tDie_4 end ] start
				 */

				currentComponent = "tDie_4";

				ok_Hash.put("tDie_4", true);
				end_Hash.put("tDie_4", System.currentTimeMillis());

				/**
				 * [tDie_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDie_4 finally ] start
				 */

				currentComponent = "tDie_4";

				/**
				 * [tDie_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_4_SUBPROCESS_STATE", 1);
	}

	public void tDie_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_5 begin ] start
				 */

				ok_Hash.put("tDie_5", false);
				start_Hash.put("tDie_5", System.currentTimeMillis());

				currentComponent = "tDie_5";

				int tos_count_tDie_5 = 0;

				/**
				 * [tDie_5 begin ] stop
				 */

				/**
				 * [tDie_5 main ] start
				 */

				currentComponent = "tDie_5";

				tLogCatcher_1
						.addMessage(
								"tDie",
								"tDie_5",
								5,
								"Error: Conectar al servidor "
										+ context.servidorSftp
										+ " "
										+ ((String) globalMap
												.get("tFTPConnection_1_ERROR_MESSAGE")),
								4);
				tLogCatcher_1Process(globalMap);

				globalMap.put("tDie_5_DIE_PRIORITY", 5);
				System.err.println("Error: Conectar al servidor "
						+ context.servidorSftp
						+ " "
						+ ((String) globalMap
								.get("tFTPConnection_1_ERROR_MESSAGE")));

				globalMap
						.put("tDie_5_DIE_MESSAGE",
								"Error: Conectar al servidor "
										+ context.servidorSftp
										+ " "
										+ ((String) globalMap
												.get("tFTPConnection_1_ERROR_MESSAGE")));
				globalMap
						.put("tDie_5_DIE_MESSAGES",
								"Error: Conectar al servidor "
										+ context.servidorSftp
										+ " "
										+ ((String) globalMap
												.get("tFTPConnection_1_ERROR_MESSAGE")));
				currentComponent = "tDie_5";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_5_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_5++;

				/**
				 * [tDie_5 main ] stop
				 */

				/**
				 * [tDie_5 end ] start
				 */

				currentComponent = "tDie_5";

				ok_Hash.put("tDie_5", true);
				end_Hash.put("tDie_5", System.currentTimeMillis());

				/**
				 * [tDie_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDie_5 finally ] start
				 */

				currentComponent = "tDie_5";

				/**
				 * [tDie_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_5_SUBPROCESS_STATE", 1);
	}

	public void tDie_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_6 begin ] start
				 */

				ok_Hash.put("tDie_6", false);
				start_Hash.put("tDie_6", System.currentTimeMillis());

				currentComponent = "tDie_6";

				int tos_count_tDie_6 = 0;

				/**
				 * [tDie_6 begin ] stop
				 */

				/**
				 * [tDie_6 main ] start
				 */

				currentComponent = "tDie_6";

				tLogCatcher_1.addMessage(
						"tDie",
						"tDie_6",
						5,
						"Error: Enviar archivos al servidor SFTP "
								+ ((String) globalMap
										.get("tFTPPut_1_ERROR_MESSAGE")), 4);
				tLogCatcher_1Process(globalMap);

				globalMap.put("tDie_6_DIE_PRIORITY", 5);
				System.err.println("Error: Enviar archivos al servidor SFTP "
						+ ((String) globalMap.get("tFTPPut_1_ERROR_MESSAGE")));

				globalMap.put(
						"tDie_6_DIE_MESSAGE",
						"Error: Enviar archivos al servidor SFTP "
								+ ((String) globalMap
										.get("tFTPPut_1_ERROR_MESSAGE")));
				globalMap.put(
						"tDie_6_DIE_MESSAGES",
						"Error: Enviar archivos al servidor SFTP "
								+ ((String) globalMap
										.get("tFTPPut_1_ERROR_MESSAGE")));
				currentComponent = "tDie_6";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_6_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_6++;

				/**
				 * [tDie_6 main ] stop
				 */

				/**
				 * [tDie_6 end ] start
				 */

				currentComponent = "tDie_6";

				ok_Hash.put("tDie_6", true);
				end_Hash.put("tDie_6", System.currentTimeMillis());

				/**
				 * [tDie_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDie_6 finally ] start
				 */

				currentComponent = "tDie_6";

				/**
				 * [tDie_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_6_SUBPROCESS_STATE", 1);
	}

	public void tFTPConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFTPConnection_1 begin ] start
				 */

				ok_Hash.put("tFTPConnection_1", false);
				start_Hash.put("tFTPConnection_1", System.currentTimeMillis());

				currentComponent = "tFTPConnection_1";

				int tos_count_tFTPConnection_1 = 0;

				class MyUserInfo implements com.jcraft.jsch.UserInfo,
						com.jcraft.jsch.UIKeyboardInteractive {

					String decryptedPassphrase_tFTPConnection_1 = routines.system.PasswordEncryptUtil
							.decryptPassword("abf4f1fe565f5343");

					String passphrase_tFTPConnection_1 = decryptedPassphrase_tFTPConnection_1;

					public String getPassphrase() {
						return passphrase_tFTPConnection_1;
					}

					public String getPassword() {
						return null;
					}

					public boolean promptPassword(String arg0) {
						return true;
					}

					public boolean promptPassphrase(String arg0) {
						return true;
					}

					public boolean promptYesNo(String arg0) {
						return true;
					}

					public void showMessage(String arg0) {
					}

					public String[] promptKeyboardInteractive(
							String destination, String name,
							String instruction, String[] prompt, boolean[] echo) {

						final String decryptedPassword_tFTPConnection_1 = context.pswdSftp;

						String[] password_tFTPConnection_1 = { decryptedPassword_tFTPConnection_1 };
						return password_tFTPConnection_1;
					}
				}
				;
				final com.jcraft.jsch.UserInfo defaultUserInfo_tFTPConnection_1 = new MyUserInfo();
				com.jcraft.jsch.JSch jsch_tFTPConnection_1 = new com.jcraft.jsch.JSch();

				com.jcraft.jsch.Session session_tFTPConnection_1 = jsch_tFTPConnection_1
						.getSession(context.usrSftp, context.servidorSftp,
								context.puertoSftp);

				final String decryptedPassword_tFTPConnection_1 = context.pswdSftp;

				session_tFTPConnection_1
						.setPassword(decryptedPassword_tFTPConnection_1);

				session_tFTPConnection_1
						.setUserInfo(defaultUserInfo_tFTPConnection_1);

				if (("true").equals(System.getProperty("http.proxySet"))) {
					com.jcraft.jsch.ProxyHTTP proxy_tFTPConnection_1 = new com.jcraft.jsch.ProxyHTTP(
							System.getProperty("http.proxyHost"),
							Integer.parseInt(System
									.getProperty("http.proxyPort")));
					if (!"".equals(System.getProperty("http.proxyUser"))) {
						proxy_tFTPConnection_1.setUserPasswd(
								System.getProperty("http.proxyUser"),
								System.getProperty("http.proxyPassword"));
					}
					session_tFTPConnection_1.setProxy(proxy_tFTPConnection_1);
				}

				session_tFTPConnection_1.connect();
				com.jcraft.jsch.Channel channel_tFTPConnection_1 = session_tFTPConnection_1
						.openChannel("sftp");
				channel_tFTPConnection_1.connect();

				com.jcraft.jsch.ChannelSftp c_tFTPConnection_1 = (com.jcraft.jsch.ChannelSftp) channel_tFTPConnection_1;

				globalMap.put("conn_tFTPConnection_1", c_tFTPConnection_1);

				/**
				 * [tFTPConnection_1 begin ] stop
				 */

				/**
				 * [tFTPConnection_1 main ] start
				 */

				currentComponent = "tFTPConnection_1";

				tos_count_tFTPConnection_1++;

				/**
				 * [tFTPConnection_1 main ] stop
				 */

				/**
				 * [tFTPConnection_1 end ] start
				 */

				currentComponent = "tFTPConnection_1";

				ok_Hash.put("tFTPConnection_1", true);
				end_Hash.put("tFTPConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFTPPut_1Process(globalMap);

				/**
				 * [tFTPConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFTPConnection_1 finally ] start
				 */

				currentComponent = "tFTPConnection_1";

				/**
				 * [tFTPConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tFTPPut_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFTPPut_1 begin ] start
				 */

				ok_Hash.put("tFTPPut_1", false);
				start_Hash.put("tFTPPut_1", System.currentTimeMillis());

				currentComponent = "tFTPPut_1";

				int tos_count_tFTPPut_1 = 0;

				int nb_file_tFTPPut_1 = 0;
				// *** sftp *** //

				class MyProgressMonitor_tFTPPut_1 implements
						com.jcraft.jsch.SftpProgressMonitor {
					public void init(int op, String src, String dest, long max) {
					}

					public boolean count(long count) {
						return true;
					}

					public void end() {
					}
				}

				com.jcraft.jsch.ChannelSftp c_tFTPPut_1 = (com.jcraft.jsch.ChannelSftp) globalMap
						.get("conn_tFTPConnection_1");

				if (c_tFTPPut_1.getHome() != null
						&& !c_tFTPPut_1.getHome().equals(c_tFTPPut_1.pwd())) {
					c_tFTPPut_1.cd(c_tFTPPut_1.getHome());
				}

				// becasue there is not the same method in JSch class as
				// FTPClient class, define a list here
				java.util.List<String> msg_tFTPPut_1 = new java.util.ArrayList<String>();
				com.jcraft.jsch.SftpProgressMonitor monitortFTPPut_1 = new MyProgressMonitor_tFTPPut_1();
				java.util.List<java.util.Map<String, String>> listtFTPPut_1 = new java.util.ArrayList<java.util.Map<String, String>>();

				java.util.Map<String, String> maptFTPPut_10 = new java.util.HashMap<String, String>();
				maptFTPPut_10.put(context.archivoONU, "");
				listtFTPPut_1.add(maptFTPPut_10);
				java.util.Map<String, String> maptFTPPut_11 = new java.util.HashMap<String, String>();
				maptFTPPut_11.put(context.archivoOFAC, "");
				listtFTPPut_1.add(maptFTPPut_11);
				String localdirtFTPPut_1 = context.ruta;

				for (java.util.Map<String, String> maptFTPPut_1 : listtFTPPut_1) {

					/**
					 * [tFTPPut_1 begin ] stop
					 */

					/**
					 * [tFTPPut_1 main ] start
					 */

					currentComponent = "tFTPPut_1";

					try {
						globalMap.put("tFTPPut_1_CURRENT_STATUS",
								"No file transfered.");
						java.util.Set<String> keySettFTPPut_1 = maptFTPPut_1
								.keySet();
						for (String keytFTPPut_1 : keySettFTPPut_1) {
							if (keytFTPPut_1 == null || "".equals(keytFTPPut_1)) {

								System.err.println("file name invalid!");
								continue;
							}
							String tempdirtFTPPut_1 = localdirtFTPPut_1;
							String filemasktFTPPut_1 = keytFTPPut_1;
							String dirtFTPPut_1 = null;

							String masktFTPPut_1 = filemasktFTPPut_1
									.replaceAll("\\\\", "/");
							int itFTPPut_1 = masktFTPPut_1.lastIndexOf('/');
							if (itFTPPut_1 != -1) {
								dirtFTPPut_1 = masktFTPPut_1.substring(0,
										itFTPPut_1);
								masktFTPPut_1 = masktFTPPut_1
										.substring(itFTPPut_1 + 1);
							}
							if (dirtFTPPut_1 != null
									&& !"".equals(dirtFTPPut_1))
								tempdirtFTPPut_1 = tempdirtFTPPut_1 + "/"
										+ dirtFTPPut_1;

							masktFTPPut_1 = masktFTPPut_1.replaceAll("\\.",
									"\\\\.").replaceAll("\\*", ".*");

							final String finalMasktFTPPut_1 = masktFTPPut_1;
							java.io.File[] listingstFTPPut_1 = null;
							java.io.File filetFTPPut_1 = new java.io.File(
									tempdirtFTPPut_1);
							if (filetFTPPut_1.isDirectory()) {
								listingstFTPPut_1 = filetFTPPut_1
										.listFiles(new java.io.FileFilter() {
											public boolean accept(
													java.io.File pathname) {
												boolean result = false;
												if (pathname != null
														&& pathname.isFile()) {
													result = java.util.regex.Pattern
															.compile(
																	finalMasktFTPPut_1)
															.matcher(
																	pathname.getName())
															.find();
												}
												return result;
											}
										});
							}
							if (listingstFTPPut_1 != null
									&& listingstFTPPut_1.length > 0) {
								for (int mtFTPPut_1 = 0; mtFTPPut_1 < listingstFTPPut_1.length; mtFTPPut_1++) {
									if (listingstFTPPut_1[mtFTPPut_1].getName()
											.matches(masktFTPPut_1)) {

										int modetFTPPut_1 = com.jcraft.jsch.ChannelSftp.OVERWRITE;

										try {
											c_tFTPPut_1
													.put(listingstFTPPut_1[mtFTPPut_1]
															.getAbsolutePath(),
															context.rutaSftp,
															monitortFTPPut_1,
															modetFTPPut_1);

											// add info to list will return
											msg_tFTPPut_1
													.add("file: "
															+ listingstFTPPut_1[mtFTPPut_1]
																	.getAbsolutePath()
															+ ", size: "
															+ listingstFTPPut_1[mtFTPPut_1]
																	.length()
															+ " bytes upload successfully");

											globalMap.put(
													"tFTPPut_1_CURRENT_STATUS",
													"File transfer OK.");
											if (c_tFTPPut_1
													.stat(context.rutaSftp
															+ "/"
															+ listingstFTPPut_1[mtFTPPut_1]
																	.getName())
													.getAtimeString() != null) {
												globalMap
														.put("tFTPPut_1_CURRENT_FILE_EXISTS",
																true);
											}
										} catch (com.jcraft.jsch.SftpException e_tFTPPut_1) {

											globalMap.put(
													"tFTPPut_1_CURRENT_STATUS",
													"File transfer fail.");
											if (c_tFTPPut_1
													.stat(context.rutaSftp
															+ "/"
															+ listingstFTPPut_1[mtFTPPut_1]
																	.getName())
													.getAtimeString() != null) {
												globalMap
														.put("tFTPPut_1_CURRENT_FILE_EXISTS",
																true);
											}

											throw (e_tFTPPut_1);

										} catch (java.lang.Exception e_tFTPPut_1) {
											if (!(e_tFTPPut_1 instanceof com.jcraft.jsch.SftpException)) {
												msg_tFTPPut_1
														.add("file "
																+ listingstFTPPut_1[mtFTPPut_1]
																		.getAbsolutePath()
																+ " not found?");

												globalMap
														.put("tFTPPut_1_CURRENT_FILE_EXISTS",
																false);
											}
											throw e_tFTPPut_1;
										}
										nb_file_tFTPPut_1++;
									}
								}
							} else {

								System.err.println("No match file exist!");
							}

							// do rename
							if (maptFTPPut_1.get(keytFTPPut_1) != ""
									&& keytFTPPut_1 != maptFTPPut_1
											.get(keytFTPPut_1)) {

								try {
									c_tFTPPut_1.rm(context.rutaSftp + "/"
											+ maptFTPPut_1.get(keytFTPPut_1));
								} catch (com.jcraft.jsch.SftpException e_tFTPPut_1) {
								}

								try {
									c_tFTPPut_1.rename(
											context.rutaSftp + "/"
													+ keytFTPPut_1,
											context.rutaSftp
													+ "/"
													+ maptFTPPut_1
															.get(keytFTPPut_1));
									globalMap.put("tFTPPut_1_CURRENT_STATUS",
											"File rename OK.");
								} catch (com.jcraft.jsch.SftpException e_tFTPPut_1) {
									globalMap.put("tFTPPut_1_CURRENT_STATUS",
											"File rename fail.");
									throw e_tFTPPut_1;
								}
							}
						}

					} catch (java.lang.Exception e_tFTPPut_1) {
						throw (e_tFTPPut_1);
					}

					tos_count_tFTPPut_1++;

					/**
					 * [tFTPPut_1 main ] stop
					 */

					/**
					 * [tFTPPut_1 end ] start
					 */

					currentComponent = "tFTPPut_1";

				}
				msg_tFTPPut_1.add(nb_file_tFTPPut_1
						+ " files have been uploaded.");

				StringBuffer sb_tFTPPut_1 = new StringBuffer();
				for (String item_tFTPPut_1 : msg_tFTPPut_1) {
					sb_tFTPPut_1.append(item_tFTPPut_1).append("\n");
				}
				globalMap.put("tFTPPut_1_TRANSFER_MESSAGES",
						sb_tFTPPut_1.toString());

				globalMap.put("tFTPPut_1_NB_FILE", nb_file_tFTPPut_1);

				ok_Hash.put("tFTPPut_1", true);
				end_Hash.put("tFTPPut_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tWarn_5Process(globalMap);

				/**
				 * [tFTPPut_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFTPPut_1 finally ] start
				 */

				currentComponent = "tFTPPut_1";

				/**
				 * [tFTPPut_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_5 begin ] start
				 */

				ok_Hash.put("tWarn_5", false);
				start_Hash.put("tWarn_5", System.currentTimeMillis());

				currentComponent = "tWarn_5";

				int tos_count_tWarn_5 = 0;

				/**
				 * [tWarn_5 begin ] stop
				 */

				/**
				 * [tWarn_5 main ] start
				 */

				currentComponent = "tWarn_5";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_5", "", Thread
						.currentThread().getId() + "", "WARN", "",
						"Se envío el archivo " + context.archivoONU + " y "
								+ context.archivoOFAC + " al servidor SFTP",
						"", "");
				tLogCatcher_1
						.addMessage("tWarn", "tWarn_5", 4,
								"Se envío el archivo " + context.archivoONU
										+ " y " + context.archivoOFAC
										+ " al servidor SFTP", 42);
				tLogCatcher_1Process(globalMap);
				globalMap.put("tWarn_5_WARN_MESSAGES", "Se envío el archivo "
						+ context.archivoONU + " y " + context.archivoOFAC
						+ " al servidor SFTP");
				globalMap.put("tWarn_5_WARN_PRIORITY", 4);
				globalMap.put("tWarn_5_WARN_CODE", 42);

				tos_count_tWarn_5++;

				/**
				 * [tWarn_5 main ] stop
				 */

				/**
				 * [tWarn_5 end ] start
				 */

				currentComponent = "tWarn_5";

				ok_Hash.put("tWarn_5", true);
				end_Hash.put("tWarn_5", System.currentTimeMillis());

				/**
				 * [tWarn_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_5 finally ] start
				 */

				currentComponent = "tWarn_5";

				/**
				 * [tWarn_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_5_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_1 begin ] start
				 */

				ok_Hash.put("tFileExist_1", false);
				start_Hash.put("tFileExist_1", System.currentTimeMillis());

				currentComponent = "tFileExist_1";

				int tos_count_tFileExist_1 = 0;

				/**
				 * [tFileExist_1 begin ] stop
				 */

				/**
				 * [tFileExist_1 main ] start
				 */

				currentComponent = "tFileExist_1";

				java.io.File file_tFileExist_1 = new java.io.File(context.ruta
						+ context.archivoONU);
				if (!file_tFileExist_1.exists()) {
					globalMap.put("tFileExist_1_EXISTS", false);
				} else {
					globalMap.put("tFileExist_1_EXISTS", true);
				}

				globalMap.put("tFileExist_1_FILENAME", context.ruta
						+ context.archivoONU);

				tos_count_tFileExist_1++;

				/**
				 * [tFileExist_1 main ] stop
				 */

				/**
				 * [tFileExist_1 end ] start
				 */

				currentComponent = "tFileExist_1";

				ok_Hash.put("tFileExist_1", true);
				end_Hash.put("tFileExist_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tWarn_3Process(globalMap);

				/**
				 * [tFileExist_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_1 finally ] start
				 */

				currentComponent = "tFileExist_1";

				/**
				 * [tFileExist_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_3 begin ] start
				 */

				ok_Hash.put("tWarn_3", false);
				start_Hash.put("tWarn_3", System.currentTimeMillis());

				currentComponent = "tWarn_3";

				int tos_count_tWarn_3 = 0;

				/**
				 * [tWarn_3 begin ] stop
				 */

				/**
				 * [tWarn_3 main ] start
				 */

				currentComponent = "tWarn_3";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread
						.currentThread().getId() + "", "WARN", "",
						"Se descargó el archivo " + context.archivoONU, "", "");
				tLogCatcher_1.addMessage("tWarn", "tWarn_3", 4,
						"Se descargó el archivo " + context.archivoONU, 42);
				tLogCatcher_1Process(globalMap);
				globalMap.put("tWarn_3_WARN_MESSAGES",
						"Se descargó el archivo " + context.archivoONU);
				globalMap.put("tWarn_3_WARN_PRIORITY", 4);
				globalMap.put("tWarn_3_WARN_CODE", 42);

				tos_count_tWarn_3++;

				/**
				 * [tWarn_3 main ] stop
				 */

				/**
				 * [tWarn_3 end ] start
				 */

				currentComponent = "tWarn_3";

				ok_Hash.put("tWarn_3", true);
				end_Hash.put("tWarn_3", System.currentTimeMillis());

				/**
				 * [tWarn_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_3 finally ] start
				 */

				currentComponent = "tWarn_3";

				/**
				 * [tWarn_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_2 begin ] start
				 */

				ok_Hash.put("tFileExist_2", false);
				start_Hash.put("tFileExist_2", System.currentTimeMillis());

				currentComponent = "tFileExist_2";

				int tos_count_tFileExist_2 = 0;

				/**
				 * [tFileExist_2 begin ] stop
				 */

				/**
				 * [tFileExist_2 main ] start
				 */

				currentComponent = "tFileExist_2";

				java.io.File file_tFileExist_2 = new java.io.File(context.ruta
						+ context.archivoOFAC);
				if (!file_tFileExist_2.exists()) {
					globalMap.put("tFileExist_2_EXISTS", false);
				} else {
					globalMap.put("tFileExist_2_EXISTS", true);
				}

				globalMap.put("tFileExist_2_FILENAME", context.ruta
						+ context.archivoOFAC);

				tos_count_tFileExist_2++;

				/**
				 * [tFileExist_2 main ] stop
				 */

				/**
				 * [tFileExist_2 end ] start
				 */

				currentComponent = "tFileExist_2";

				ok_Hash.put("tFileExist_2", true);
				end_Hash.put("tFileExist_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tWarn_4Process(globalMap);
				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tFTPConnection_1Process(globalMap);

				/**
				 * [tFileExist_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_2 finally ] start
				 */

				currentComponent = "tFileExist_2";

				/**
				 * [tFileExist_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_2_SUBPROCESS_STATE", 1);
	}

	public void tWarn_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_4 begin ] start
				 */

				ok_Hash.put("tWarn_4", false);
				start_Hash.put("tWarn_4", System.currentTimeMillis());

				currentComponent = "tWarn_4";

				int tos_count_tWarn_4 = 0;

				/**
				 * [tWarn_4 begin ] stop
				 */

				/**
				 * [tWarn_4 main ] start
				 */

				currentComponent = "tWarn_4";

				resumeUtil
						.addLog("USER_DEF_LOG",
								"NODE:tWarn_4",
								"",
								Thread.currentThread().getId() + "",
								"WARN",
								"",
								"Se descargó el archivo " + context.archivoOFAC,
								"", "");
				tLogCatcher_1.addMessage("tWarn", "tWarn_4", 4,
						"Se descargó el archivo " + context.archivoOFAC, 42);
				tLogCatcher_1Process(globalMap);
				globalMap.put("tWarn_4_WARN_MESSAGES",
						"Se descargó el archivo " + context.archivoOFAC);
				globalMap.put("tWarn_4_WARN_PRIORITY", 4);
				globalMap.put("tWarn_4_WARN_CODE", 42);

				tos_count_tWarn_4++;

				/**
				 * [tWarn_4 main ] stop
				 */

				/**
				 * [tWarn_4 end ] start
				 */

				currentComponent = "tWarn_4";

				ok_Hash.put("tWarn_4", true);
				end_Hash.put("tWarn_4", System.currentTimeMillis());

				/**
				 * [tWarn_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_4 finally ] start
				 */

				currentComponent = "tWarn_4";

				/**
				 * [tWarn_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_4_SUBPROCESS_STATE", 1);
	}

	public void tFileFetch_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileFetch_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileFetch_1 begin ] start
				 */

				ok_Hash.put("tFileFetch_1", false);
				start_Hash.put("tFileFetch_1", System.currentTimeMillis());

				currentComponent = "tFileFetch_1";

				int tos_count_tFileFetch_1 = 0;

				/**
				 * [tFileFetch_1 begin ] stop
				 */

				/**
				 * [tFileFetch_1 main ] start
				 */

				currentComponent = "tFileFetch_1";

				java.io.InputStream retIS_tFileFetch_1 = null;

				class SocketFactory_tFileFetch_1
						implements
						org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory {

					private javax.net.ssl.SSLContext sslcontext = null;

					private javax.net.ssl.SSLContext createSSLContext() {
						javax.net.ssl.SSLContext sslcontext = null;

						try {
							sslcontext = javax.net.ssl.SSLContext
									.getInstance("SSL");
							sslcontext
									.init(null,
											new javax.net.ssl.TrustManager[] { new TrustAnyTrustManager() },
											new java.security.SecureRandom());
						} catch (java.security.NoSuchAlgorithmException e) {

							e.printStackTrace();
						} catch (java.security.KeyManagementException e) {

							e.printStackTrace();
						}
						return sslcontext;
					}

					private javax.net.ssl.SSLContext getSSLContext() {

						if (this.sslcontext == null) {
							this.sslcontext = createSSLContext();
						}
						return this.sslcontext;
					}

					public java.net.Socket createSocket(java.net.Socket socket,
							String host, int port, boolean autoClose)
							throws java.io.IOException,
							java.net.UnknownHostException {
						return getSSLContext().getSocketFactory().createSocket(
								socket, host, port, autoClose);
					}

					public java.net.Socket createSocket(String host, int port)
							throws java.io.IOException,
							java.net.UnknownHostException {
						return getSSLContext().getSocketFactory().createSocket(
								host, port);
					}

					public java.net.Socket createSocket(String host, int port,
							java.net.InetAddress clientHost, int clientPort)
							throws java.io.IOException,
							java.net.UnknownHostException {
						return getSSLContext().getSocketFactory().createSocket(
								host, port, clientHost, clientPort);
					}

					public java.net.Socket createSocket(
							String host,
							int port,
							java.net.InetAddress localAddress,
							int localPort,
							org.apache.commons.httpclient.params.HttpConnectionParams params)
							throws java.io.IOException,
							java.net.UnknownHostException,
							org.apache.commons.httpclient.ConnectTimeoutException {

						if (params == null) {
							throw new IllegalArgumentException(
									"Parameters may not be null");
						}
						int timeout = params.getConnectionTimeout();
						javax.net.SocketFactory socketfactory = getSSLContext()
								.getSocketFactory();

						if (timeout == 0) {
							return socketfactory.createSocket(host, port,
									localAddress, localPort);
						} else {
							java.net.Socket socket = socketfactory
									.createSocket();
							java.net.SocketAddress localaddr = new java.net.InetSocketAddress(
									localAddress, localPort);
							java.net.SocketAddress remoteaddr = new java.net.InetSocketAddress(
									host, port);
							socket.bind(localaddr);
							socket.connect(remoteaddr, timeout);
							return socket;
						}
					}

					class TrustAnyTrustManager implements
							javax.net.ssl.X509TrustManager {
						public void checkClientTrusted(
								java.security.cert.X509Certificate[] chain,
								String authType)
								throws java.security.cert.CertificateException {
						}

						public void checkServerTrusted(
								java.security.cert.X509Certificate[] chain,
								String authType)
								throws java.security.cert.CertificateException {
						}

						public java.security.cert.X509Certificate[] getAcceptedIssuers() {
							return new java.security.cert.X509Certificate[] {};
						}
					}
				}

				if ((context.urlONU + context.archivoONU).toLowerCase()
						.startsWith("https://")) {
					org.apache.commons.httpclient.protocol.Protocol myhttps = new org.apache.commons.httpclient.protocol.Protocol(
							"https", new SocketFactory_tFileFetch_1(), 443);
					org.apache.commons.httpclient.protocol.Protocol
							.registerProtocol("https", myhttps);
				}

				org.apache.commons.httpclient.HttpClient client_tFileFetch_1 = new org.apache.commons.httpclient.HttpClient();

				client_tFileFetch_1.getHttpConnectionManager().getParams()
						.setConnectionTimeout(1000);

				client_tFileFetch_1
						.getParams()
						.setCookiePolicy(
								org.apache.commons.httpclient.cookie.CookiePolicy.DEFAULT);

				org.apache.commons.httpclient.methods.GetMethod method_tFileFetch_1 = new org.apache.commons.httpclient.methods.GetMethod(
						context.urlONU + context.archivoONU);

				boolean isContinue_tFileFetch_1 = true;
				int status_tFileFetch_1;
				String finalURL_tFileFetch_1 = context.urlONU
						+ context.archivoONU;

				try { // B_01

					status_tFileFetch_1 = client_tFileFetch_1
							.executeMethod(method_tFileFetch_1);

					if (status_tFileFetch_1 != org.apache.commons.httpclient.HttpStatus.SC_OK) {
						throw new java.lang.Exception("Method failed: "
								+ method_tFileFetch_1.getStatusLine());
					}

				} catch (java.lang.Exception e) {

					throw (e);

				}

				if (isContinue_tFileFetch_1) {

					java.io.InputStream in_tFileFetch_1 = method_tFileFetch_1
							.getResponseBodyAsStream();
					String sDir_tFileFetch_1 = (context.ruta).trim();
					String fileName_tFileFetch_1 = ("").trim();
					// open directory
					java.net.URL url_tFileFetch_1 = new java.net.URL(
							finalURL_tFileFetch_1);
					String sURIPath_tFileFetch_1 = "";
					int iLastSlashIndex_tFileFetch_1 = 0;
					sURIPath_tFileFetch_1 = url_tFileFetch_1.getFile();
					iLastSlashIndex_tFileFetch_1 = sURIPath_tFileFetch_1
							.lastIndexOf("/");

					// if not input file name, get the name from URI
					if ("".equals(fileName_tFileFetch_1)) {
						if (iLastSlashIndex_tFileFetch_1 > 0
								&& (!sURIPath_tFileFetch_1.endsWith("/"))) {
							fileName_tFileFetch_1 = sURIPath_tFileFetch_1
									.substring(iLastSlashIndex_tFileFetch_1 + 1);
						} else {
							fileName_tFileFetch_1 = "defaultfilename.txt";
						}
					}
					java.io.File dir_tFileFetch_1 = new java.io.File(
							sDir_tFileFetch_1);

					// pretreatment
					try {
						java.io.File test_file_tFileFetch_1 = new java.io.File(
								dir_tFileFetch_1, fileName_tFileFetch_1);
						test_file_tFileFetch_1.getParentFile().mkdirs();

						if (test_file_tFileFetch_1.createNewFile()) {
							test_file_tFileFetch_1.delete();
						}
					} catch (java.lang.Exception e) {

						fileName_tFileFetch_1 = "defaultfilename.txt";
					}
					java.io.File file_tFileFetch_1 = new java.io.File(
							dir_tFileFetch_1, fileName_tFileFetch_1);
					file_tFileFetch_1.getParentFile().mkdirs();
					java.io.FileOutputStream out_tFileFetch_1 = new java.io.FileOutputStream(
							file_tFileFetch_1);
					byte[] buffer_tFileFetch_1 = new byte[1024];
					int count_tFileFetch_1 = 0;

					while ((count_tFileFetch_1 = in_tFileFetch_1
							.read(buffer_tFileFetch_1)) > 0) {
						out_tFileFetch_1.write(buffer_tFileFetch_1, 0,
								count_tFileFetch_1);
					}
					// close opened object
					in_tFileFetch_1.close();
					out_tFileFetch_1.close();

					method_tFileFetch_1.releaseConnection();

				} // B_01
				globalMap.put("tFileFetch_1_INPUT_STREAM", retIS_tFileFetch_1);

				tos_count_tFileFetch_1++;

				/**
				 * [tFileFetch_1 main ] stop
				 */

				/**
				 * [tFileFetch_1 end ] start
				 */

				currentComponent = "tFileFetch_1";

				ok_Hash.put("tFileFetch_1", true);
				end_Hash.put("tFileFetch_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tWarn_1Process(globalMap);

				/**
				 * [tFileFetch_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileFetch_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFileExist_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileFetch_1 finally ] start
				 */

				currentComponent = "tFileFetch_1";

				/**
				 * [tFileFetch_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileFetch_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());

				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */

				/**
				 * [tWarn_1 main ] start
				 */

				currentComponent = "tWarn_1";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread
						.currentThread().getId() + "", "WARN", "",
						"Se conecta a la url de la ONU", "", "");
				tLogCatcher_1.addMessage("tWarn", "tWarn_1", 4,
						"Se conecta a la url de la ONU", 42);
				tLogCatcher_1Process(globalMap);
				globalMap.put("tWarn_1_WARN_MESSAGES",
						"Se conecta a la url de la ONU");
				globalMap.put("tWarn_1_WARN_PRIORITY", 4);
				globalMap.put("tWarn_1_WARN_CODE", 42);

				tos_count_tWarn_1++;

				/**
				 * [tWarn_1 main ] stop
				 */

				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				/**
				 * [tWarn_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}

	public void tFileFetch_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileFetch_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileFetch_2 begin ] start
				 */

				ok_Hash.put("tFileFetch_2", false);
				start_Hash.put("tFileFetch_2", System.currentTimeMillis());

				currentComponent = "tFileFetch_2";

				int tos_count_tFileFetch_2 = 0;

				/**
				 * [tFileFetch_2 begin ] stop
				 */

				/**
				 * [tFileFetch_2 main ] start
				 */

				currentComponent = "tFileFetch_2";

				java.io.InputStream retIS_tFileFetch_2 = null;

				org.apache.commons.httpclient.HttpClient client_tFileFetch_2 = new org.apache.commons.httpclient.HttpClient();

				client_tFileFetch_2.getHttpConnectionManager().getParams()
						.setConnectionTimeout(1000);

				client_tFileFetch_2
						.getParams()
						.setCookiePolicy(
								org.apache.commons.httpclient.cookie.CookiePolicy.DEFAULT);

				org.apache.commons.httpclient.methods.GetMethod method_tFileFetch_2 = new org.apache.commons.httpclient.methods.GetMethod(
						context.urlOFAC + context.archivoOFAC);

				boolean isContinue_tFileFetch_2 = true;
				int status_tFileFetch_2;
				String finalURL_tFileFetch_2 = context.urlOFAC
						+ context.archivoOFAC;

				try { // B_01

					status_tFileFetch_2 = client_tFileFetch_2
							.executeMethod(method_tFileFetch_2);

					if (status_tFileFetch_2 != org.apache.commons.httpclient.HttpStatus.SC_OK) {
						throw new java.lang.Exception("Method failed: "
								+ method_tFileFetch_2.getStatusLine());
					}

				} catch (java.lang.Exception e) {

					throw (e);

				}

				if (isContinue_tFileFetch_2) {

					java.io.InputStream in_tFileFetch_2 = method_tFileFetch_2
							.getResponseBodyAsStream();
					String sDir_tFileFetch_2 = (context.ruta).trim();
					String fileName_tFileFetch_2 = ("").trim();
					// open directory
					java.net.URL url_tFileFetch_2 = new java.net.URL(
							finalURL_tFileFetch_2);
					String sURIPath_tFileFetch_2 = "";
					int iLastSlashIndex_tFileFetch_2 = 0;
					sURIPath_tFileFetch_2 = url_tFileFetch_2.getFile();
					iLastSlashIndex_tFileFetch_2 = sURIPath_tFileFetch_2
							.lastIndexOf("/");

					// if not input file name, get the name from URI
					if ("".equals(fileName_tFileFetch_2)) {
						if (iLastSlashIndex_tFileFetch_2 > 0
								&& (!sURIPath_tFileFetch_2.endsWith("/"))) {
							fileName_tFileFetch_2 = sURIPath_tFileFetch_2
									.substring(iLastSlashIndex_tFileFetch_2 + 1);
						} else {
							fileName_tFileFetch_2 = "defaultfilename.txt";
						}
					}
					java.io.File dir_tFileFetch_2 = new java.io.File(
							sDir_tFileFetch_2);

					// pretreatment
					try {
						java.io.File test_file_tFileFetch_2 = new java.io.File(
								dir_tFileFetch_2, fileName_tFileFetch_2);
						test_file_tFileFetch_2.getParentFile().mkdirs();

						if (test_file_tFileFetch_2.createNewFile()) {
							test_file_tFileFetch_2.delete();
						}
					} catch (java.lang.Exception e) {

						fileName_tFileFetch_2 = "defaultfilename.txt";
					}
					java.io.File file_tFileFetch_2 = new java.io.File(
							dir_tFileFetch_2, fileName_tFileFetch_2);
					file_tFileFetch_2.getParentFile().mkdirs();
					java.io.FileOutputStream out_tFileFetch_2 = new java.io.FileOutputStream(
							file_tFileFetch_2);
					byte[] buffer_tFileFetch_2 = new byte[1024];
					int count_tFileFetch_2 = 0;

					while ((count_tFileFetch_2 = in_tFileFetch_2
							.read(buffer_tFileFetch_2)) > 0) {
						out_tFileFetch_2.write(buffer_tFileFetch_2, 0,
								count_tFileFetch_2);
					}
					// close opened object
					in_tFileFetch_2.close();
					out_tFileFetch_2.close();

					method_tFileFetch_2.releaseConnection();

				} // B_01
				globalMap.put("tFileFetch_2_INPUT_STREAM", retIS_tFileFetch_2);

				tos_count_tFileFetch_2++;

				/**
				 * [tFileFetch_2 main ] stop
				 */

				/**
				 * [tFileFetch_2 end ] start
				 */

				currentComponent = "tFileFetch_2";

				ok_Hash.put("tFileFetch_2", true);
				end_Hash.put("tFileFetch_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tWarn_2Process(globalMap);

				/**
				 * [tFileFetch_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileFetch_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tFileExist_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileFetch_2 finally ] start
				 */

				currentComponent = "tFileFetch_2";

				/**
				 * [tFileFetch_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileFetch_2_SUBPROCESS_STATE", 1);
	}

	public void tWarn_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_2 begin ] start
				 */

				ok_Hash.put("tWarn_2", false);
				start_Hash.put("tWarn_2", System.currentTimeMillis());

				currentComponent = "tWarn_2";

				int tos_count_tWarn_2 = 0;

				/**
				 * [tWarn_2 begin ] stop
				 */

				/**
				 * [tWarn_2 main ] start
				 */

				currentComponent = "tWarn_2";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread
						.currentThread().getId() + "", "WARN", "",
						"Se conecta a la url de la OFAC", "", "");
				tLogCatcher_1.addMessage("tWarn", "tWarn_2", 4,
						"Se conecta a la url de la OFAC", 42);
				tLogCatcher_1Process(globalMap);
				globalMap.put("tWarn_2_WARN_MESSAGES",
						"Se conecta a la url de la OFAC");
				globalMap.put("tWarn_2_WARN_PRIORITY", 4);
				globalMap.put("tWarn_2_WARN_CODE", 42);

				tos_count_tWarn_2++;

				/**
				 * [tWarn_2 main ] stop
				 */

				/**
				 * [tWarn_2 end ] start
				 */

				currentComponent = "tWarn_2";

				ok_Hash.put("tWarn_2", true);
				end_Hash.put("tWarn_2", System.currentTimeMillis());

				/**
				 * [tWarn_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_2 finally ] start
				 */

				currentComponent = "tWarn_2";

				/**
				 * [tWarn_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				context.ip = "servidor";
				context.usuario = "usuario windows";
				try {
					context.usuario = System.getProperty("user.name"); // solo
																		// usuario
					// System.out.println(context.usuario);
					// obtener ip
					InetAddress IP = InetAddress.getLocalHost();
					context.ip = IP.getHostAddress();
					// System.out.println(context.ip); //solo ip
					// System.out.println(IP.toString()); //usuario + ip
				} catch (UnknownHostException ex) {
					System.out
							.println("Error al obtener usuario e ip del server");
					// Logger.getLogger(JavaApp.class.getName()).log(Level.SEVERE,
					// null, ex);
				}

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DESCARGALISTAS_ListasNegras = new byte[0];
		static byte[] commonByteArray_DESCARGALISTAS_ListasNegras = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String ip;

		public String getIp() {
			return this.ip;
		}

		public String usuario;

		public String getUsuario() {
			return this.usuario;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DESCARGALISTAS_ListasNegras.length) {
					if (length < 1024
							&& commonByteArray_DESCARGALISTAS_ListasNegras.length == 0) {
						commonByteArray_DESCARGALISTAS_ListasNegras = new byte[1024];
					} else {
						commonByteArray_DESCARGALISTAS_ListasNegras = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DESCARGALISTAS_ListasNegras, 0,
						length);
				strReturn = new String(
						commonByteArray_DESCARGALISTAS_ListasNegras, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DESCARGALISTAS_ListasNegras) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.ip = readString(dis);

					this.usuario = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.ip, dos);

				// String

				writeString(this.usuario, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",ip=" + ip);
			sb.append(",usuario=" + usuario);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DESCARGALISTAS_ListasNegras = new byte[0];
		static byte[] commonByteArray_DESCARGALISTAS_ListasNegras = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String ip;

		public String getIp() {
			return this.ip;
		}

		public String usuario;

		public String getUsuario() {
			return this.usuario;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DESCARGALISTAS_ListasNegras.length) {
					if (length < 1024
							&& commonByteArray_DESCARGALISTAS_ListasNegras.length == 0) {
						commonByteArray_DESCARGALISTAS_ListasNegras = new byte[1024];
					} else {
						commonByteArray_DESCARGALISTAS_ListasNegras = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DESCARGALISTAS_ListasNegras, 0,
						length);
				strReturn = new String(
						commonByteArray_DESCARGALISTAS_ListasNegras, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DESCARGALISTAS_ListasNegras) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.ip = readString(dis);

					this.usuario = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.ip, dos);

				// String

				writeString(this.usuario, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",ip=" + ip);
			sb.append(",usuario=" + usuario);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_DESCARGALISTAS_ListasNegras = new byte[0];
		static byte[] commonByteArray_DESCARGALISTAS_ListasNegras = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String ip;

		public String getIp() {
			return this.ip;
		}

		public String usuario;

		public String getUsuario() {
			return this.usuario;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DESCARGALISTAS_ListasNegras.length) {
					if (length < 1024
							&& commonByteArray_DESCARGALISTAS_ListasNegras.length == 0) {
						commonByteArray_DESCARGALISTAS_ListasNegras = new byte[1024];
					} else {
						commonByteArray_DESCARGALISTAS_ListasNegras = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DESCARGALISTAS_ListasNegras, 0,
						length);
				strReturn = new String(
						commonByteArray_DESCARGALISTAS_ListasNegras, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DESCARGALISTAS_ListasNegras) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.ip = readString(dis);

					this.usuario = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.ip, dos);

				// String

				writeString(this.usuario, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",ip=" + ip);
			sb.append(",usuario=" + usuario);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DESCARGALISTAS_ListasNegras = new byte[0];
		static byte[] commonByteArray_DESCARGALISTAS_ListasNegras = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DESCARGALISTAS_ListasNegras.length) {
					if (length < 1024
							&& commonByteArray_DESCARGALISTAS_ListasNegras.length == 0) {
						commonByteArray_DESCARGALISTAS_ListasNegras = new byte[1024];
					} else {
						commonByteArray_DESCARGALISTAS_ListasNegras = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DESCARGALISTAS_ListasNegras, 0,
						length);
				strReturn = new String(
						commonByteArray_DESCARGALISTAS_ListasNegras, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DESCARGALISTAS_ListasNegras) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.ruta + "/log.txt")).getAbsolutePath().replace(
						"\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				if (filetFileOutputDelimited_1.exists()) {
					isFileGenerated_tFileOutputDelimited_1 = false;
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {

						dir_tFileOutputDelimited_1.mkdirs();

					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, true),
								"ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);

				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);

					}
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
					String ip;
					String usuario;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row1.type = lcm.getType();
					row1.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row1.priority = lcm.getPriority();
					row1.message = lcm.getMessage();
					row1.code = lcm.getCode();

					row1.moment = java.util.Calendar.getInstance().getTime();

					row1.pid = pid;
					row1.root_pid = rootPid;
					row1.father_pid = fatherPid;

					row1.project = projectName;
					row1.job = jobName;
					row1.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					// row1
					// row1

					if (execStat) {
						runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;
						Var.ip = context.ip;
						Var.usuario = context.usuario;// ###############################
						// ###############################
						// # Output tables

						out1 = null;

						// # Output table : 'out1'
						out1_tmp.moment = row1.moment;
						out1_tmp.ip = Var.ip;
						out1_tmp.usuario = Var.usuario;
						out1_tmp.project = row1.project;
						out1_tmp.job = row1.job;
						out1_tmp.type = row1.type;
						out1_tmp.origin = row1.origin;
						out1_tmp.message = row1.message;
						out1 = out1_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "out1"
					if (out1 != null) {

						/**
						 * [tReplicate_1 main ] start
						 */

						currentComponent = "tReplicate_1";

						// out1
						// out1

						if (execStat) {
							runStat.updateStatOnConnection("out1" + iterateId,
									1, 1);
						}

						row2 = new row2Struct();

						row2.moment = out1.moment;
						row2.ip = out1.ip;
						row2.usuario = out1.usuario;
						row2.project = out1.project;
						row2.job = out1.job;
						row2.type = out1.type;
						row2.origin = out1.origin;
						row2.message = out1.message;
						row3 = new row3Struct();

						row3.moment = out1.moment;
						row3.ip = out1.ip;
						row3.usuario = out1.usuario;
						row3.project = out1.project;
						row3.job = out1.job;
						row3.type = out1.type;
						row3.origin = out1.origin;
						row3.message = out1.message;

						tos_count_tReplicate_1++;

						/**
						 * [tReplicate_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

						if (row2.moment != null) {

							sb_tFileOutputDelimited_1.append(

							FormatterUtils.format_Date(row2.moment,
									"yyyy-MM-dd HH:mm:ss")

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row2.ip != null) {

							sb_tFileOutputDelimited_1.append(

							row2.ip

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row2.usuario != null) {

							sb_tFileOutputDelimited_1.append(

							row2.usuario

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row2.project != null) {

							sb_tFileOutputDelimited_1.append(

							row2.project

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row2.job != null) {

							sb_tFileOutputDelimited_1.append(

							row2.job

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row2.type != null) {

							sb_tFileOutputDelimited_1.append(

							row2.type

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row2.origin != null) {

							sb_tFileOutputDelimited_1.append(

							row2.origin

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);

						if (row2.message != null) {

							sb_tFileOutputDelimited_1.append(

							row2.message

							);

						}

						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1",
								nb_line_tFileOutputDelimited_1);

						outtFileOutputDelimited_1
								.write(sb_tFileOutputDelimited_1.toString());

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tLogRow_1 main ] start
						 */

						currentComponent = "tLogRow_1";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_1 = new StringBuilder();

						if (row3.moment != null) { //

							strBuffer_tLogRow_1.append(FormatterUtils
									.format_Date(row3.moment,
											"yyyy-MM-dd HH:mm:ss"));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row3.ip != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row3.ip));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row3.usuario != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row3.usuario));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row3.project != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row3.project));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row3.job != null) { //

							strBuffer_tLogRow_1
									.append(String.valueOf(row3.job));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row3.type != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row3.type));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row3.origin != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row3.origin));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row3.message != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row3.message));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_1 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_1);
						}

						consoleOut_tLogRow_1.println(strBuffer_tLogRow_1
								.toString());
						consoleOut_tLogRow_1.flush();
						nb_line_tLogRow_1++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_1++;

						/**
						 * [tLogRow_1 main ] stop
						 */

					} // End of branch "out1"

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tLogRow_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				int tos_count_tLogRow_2 = 0;

				// /////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[0];

					public void addRow(String[] row) {

						for (int i = 0; i < 0; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("tLogRow_2");
				util_tLogRow_2.addRow(new String[] {});
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tLogRow_2 main ] start
				 */

				currentComponent = "tLogRow_2";

				tos_count_tLogRow_2++;

				/**
				 * [tLogRow_2 main ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2
						.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogRow_2_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ListasNegras ListasNegrasClass = new ListasNegras();

		int exitCode = ListasNegrasClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ListasNegras.class.getClassLoader()
					.getResourceAsStream(
							"descargalistas/listasnegras_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.ruta = (String) context.getProperty("ruta");
			context.urlONU = (String) context.getProperty("urlONU");
			context.urlOFAC = (String) context.getProperty("urlOFAC");
			context.archivoONU = (String) context.getProperty("archivoONU");
			context.archivoOFAC = (String) context.getProperty("archivoOFAC");
			context.ip = (String) context.getProperty("ip");
			context.usuario = (String) context.getProperty("usuario");
			context.rutaSftp = (String) context.getProperty("rutaSftp");
			context.servidorSftp = (String) context.getProperty("servidorSftp");
			context.usrSftp = (String) context.getProperty("usrSftp");
			try {
				context.puertoSftp = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("puertoSftp"));
			} catch (NumberFormatException e) {
				context.puertoSftp = null;
			}
			String pwd_pswdSftp_value = context.getProperty("pswdSftp");
			context.pswdSftp = null;
			if (pwd_pswdSftp_value != null) {
				if (context_param.containsKey("pswdSftp")) {// no need to
															// decrypt if it
															// come from program
															// argument or
															// parent job
															// runtime
					context.pswdSftp = pwd_pswdSftp_value;
				} else if (!pwd_pswdSftp_value.isEmpty()) {
					try {
						context.pswdSftp = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_pswdSftp_value);
						context.put("pswdSftp", context.pswdSftp);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ruta")) {
				context.ruta = (String) parentContextMap.get("ruta");
			}
			if (parentContextMap.containsKey("urlONU")) {
				context.urlONU = (String) parentContextMap.get("urlONU");
			}
			if (parentContextMap.containsKey("urlOFAC")) {
				context.urlOFAC = (String) parentContextMap.get("urlOFAC");
			}
			if (parentContextMap.containsKey("archivoONU")) {
				context.archivoONU = (String) parentContextMap
						.get("archivoONU");
			}
			if (parentContextMap.containsKey("archivoOFAC")) {
				context.archivoOFAC = (String) parentContextMap
						.get("archivoOFAC");
			}
			if (parentContextMap.containsKey("ip")) {
				context.ip = (String) parentContextMap.get("ip");
			}
			if (parentContextMap.containsKey("usuario")) {
				context.usuario = (String) parentContextMap.get("usuario");
			}
			if (parentContextMap.containsKey("rutaSftp")) {
				context.rutaSftp = (String) parentContextMap.get("rutaSftp");
			}
			if (parentContextMap.containsKey("servidorSftp")) {
				context.servidorSftp = (String) parentContextMap
						.get("servidorSftp");
			}
			if (parentContextMap.containsKey("usrSftp")) {
				context.usrSftp = (String) parentContextMap.get("usrSftp");
			}
			if (parentContextMap.containsKey("puertoSftp")) {
				context.puertoSftp = (Integer) parentContextMap
						.get("puertoSftp");
			}
			if (parentContextMap.containsKey("pswdSftp")) {
				context.pswdSftp = (java.lang.String) parentContextMap
						.get("pswdSftp");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("pswdSftp");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileFetch_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileFetch_1) {
			globalMap.put("tFileFetch_1_SUBPROCESS_STATE", -1);

			e_tFileFetch_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileFetch_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileFetch_2) {
			globalMap.put("tFileFetch_2_SUBPROCESS_STATE", -1);

			e_tFileFetch_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : ListasNegras");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 159637 characters generated by Talend Open Studio for Data Integration on the
 * 23 de octubre de 2015 17:51:45 COT
 ************************************************************************************************/
